import java.io.*;
import java.nio.charset.Charset;
import java.util.*;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.TimeUnit;

import com.google.common.collect.Lists;
import io.netty.util.internal.ConcurrentSet;
import org.apache.commons.lang.time.DateFormatUtils;
import org.apache.commons.lang.time.DateUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.hadoop.hbase.client.Connection;
import org.apache.hadoop.hbase.client.ConnectionFactory;

public class HbaseTest {
  public static final LinkedBlockingQueue<String> strlist = new LinkedBlockingQueue<String>();
  private static final LinkedBlockingQueue<File> filelist = new LinkedBlockingQueue<File>();
  private static final Log log = LogFactory.getLog(HbaseTest.class);
  private static final ConcurrentLinkedQueue<Long> responseTime = new ConcurrentLinkedQueue<Long>();
  private static final ConcurrentLinkedQueue<Long> responseData = new ConcurrentLinkedQueue<Long>();


  private static String getDateStr() {
    return DateFormatUtils.format(new Date(), "yyyy-MM-dd HH:mm:ss");
  }

  public static void addTime(long time) {
    responseTime.add(time);
  }

  public static void addDataSize(long size) {
    responseData.add(size);
  }

  public static void main(String[] args) throws Exception {
    String path = null;
    int threads = 0;
    String zookeeper = null;
    String port = null;
    String parent = null;
    String tablename = null;
    String family = null;
    String qualiy = null;
    int batch = 0;

    if (args.length != 9) {
      log.warn("args length is incorrect, please input again !");
      log.info("args 0: file path");
      log.info("args 1: thread numbers");
      log.info("args 2: hbase zookeeper");
      log.info("args 3: hbase port");
      log.info("args 4: hbase parent");
      log.info("args 6: hbase table name");
      log.info("args 7: hbase table family");
      log.info("args 8: hbase table quality");
      log.info("args 9: batch numbers");

      System.exit(0);
      Runtime.getRuntime().gc();
    }

    path = args[0];
    threads = Integer.parseInt(args[1]);
    zookeeper = args[2];
    port = args[3];
    parent = args[4];
    tablename = args[5];
    family = args[6];
    qualiy = args[7];
    batch = Integer.parseInt(args[8]);

    FilesList(path);
    ReadFile();

    Connection connection = ConnectionFactory.createConnection(HbaseConnect.connection(zookeeper, parent, port));
    List<Thread> threadList = Lists.newArrayList();
    for (int i = 0; i < threads; i++) {
      BatchGet bg = new BatchGet(connection, tablename, family, qualiy, batch);
      Thread td = new Thread(bg);
      td.start();
      threadList.add(td);
      log.info("Start thread " + i);
    }

    long startTime = System.currentTimeMillis();
    System.out.println("Test start time: " + getDateStr());
    for (Thread t : threadList) {
      try {
        t.join();
      } catch (Exception e) {
        log.error("Join thread fail", e);
      }
    }
    print("Test end time: " + getDateStr());
    print("\n\n");

    long endTime = System.currentTimeMillis();
    print("************************************ Test Result ************************************");
    print("Report time: " + getDateStr());
    print(String.format("Test Duration: %ds, Threads: %d, Requests: %d, batchSize: %d, QPS: %d",
        (endTime - startTime) / 1000, threads, responseTime.size(),
        batch, (int)(responseTime.size() / ((endTime - startTime)/1000.0))));

    List<Long> timeList = new ArrayList<>(responseTime);
    List<Long> sizeList = new ArrayList<>(responseData);
    printResult("Response Delay: ", timeList);
    printResult("Response Data Size: ", sizeList);

  }

  private static void print(String str) {
    System.out.println(str);
  }

  private static void printResult(String title, List<Long> list) {
    Collections.sort(list);
    print(title);
    calcResult(list);
    print("10%~90% result:");
    list = list.subList((int)(list.size()*0.1), (int)(list.size()*0.9));
    calcResult(list);
  }

  private static void calcResult(List<Long> list) {
    long total = 0;
    int size = list.size();
    for (long time : list) {
      total += time;
    }
    print("Average: " + (total / size) + "  Size: " + size);
    print(String.format("Percentile 0.50, 0.75, 0.90, 0.95, 0.99: %d %d %d %d %d",
        list.get((int)(size*0.50)), list.get((int)(size*0.75)),
        list.get((int)(size*0.90)), list.get((int)(size*0.95)), list.get((int)(size*0.99))));
  }


  private static void FilesList(String dir) {
    if (null != dir && dir.trim().length() > 0) {
      File file = new File(dir.trim());
      if (file.isDirectory()) {
        File[] listFile = file.listFiles();
        if (null != listFile) {
          for (File f : listFile) {
            if (f.isFile()) {
              filelist.add(f);
            }
          }
        }
      } else {
        filelist.add(file);
      }
    }
  }

  private static void ReadFile() {
    while (true) {
      File file = null;
      try {
        file = filelist.poll(3, TimeUnit.SECONDS);
      } catch (InterruptedException e) {
        e.printStackTrace();
      }
      if (null == file) {
        break;
      }

      FileInputStream fis = null;
      try {
        fis = new FileInputStream(file);
      } catch (FileNotFoundException e) {
        e.printStackTrace();
      }
      InputStreamReader isr = new InputStreamReader(fis, Charset.forName("UTF-8"));
      BufferedReader reader = new BufferedReader(isr);

      String line = null;
      try {
        while (null != (line = reader.readLine())) {
          strlist.add(line);
        }
      } catch (IOException e) {
        e.printStackTrace();
      }
    }
    String keys = "82736516,214933741,93787468,70945379,408384021,10800119,503588921,06231555,595657151,498895741,071640441,51777243,31913938,215001931,488870201,753066251,3338233,25078004,007918021,213569421,78583509,99862005,743409941,58599294,770762941,68415677,526900931,94984278,633713251,877419721,84261559,85999877,48052943,596011541,3050891,538766111,568233721,053865151,510334241,848905901,547405441,31610076,25198696,207169631,381609441,346760141,840793721,80183843,477862841,45156153,118044521,39073502,840747401,020135731,80730573,719905031,677209001,16466339,30572211,46948444,51312154,632414331,450882531,5735995,639763011,93563822,46057927,898234211,013655741,094237051,570964441,87520006,201477501,996249141,5439343,17020631,17963521,128081741,912911341,7225935,811509841,65628311,89085984,551351241,175640841,49156807,34125411,229400541,227145831,437585051,419766331,82455425,48411578,799506601,372993711,38640646,82321614,700259901,217861341,576157331,818097041,23787837,68006131,45927383,82831544,99562733,25170445,07155048,36877988,00918209,445595521,84874829,99602424,92196864,0490317,483706831,331023521,894019421,504650541,3960711,270451421,440989511,316732341,16968189,119248441,545361041,440533251,455205231,933140821,421785941,517080111,59001693,650457441,555980641,748085601,789964641,106324931,692955521,989036711,955133921,233729051,571526251,120879721,951953051,613496401,286241731,505472241,202720321,307360301,487361531,133920641,812587311,423513841,90981525,624933711,593434801,486190431,116646741,633710821,95464093,53983766,412152331,158688331,0851395,079643701,3247464,248906421,405227401,575163311,36013892,18349199,976903131,932123841,288442051,21249613,35322265,84891379,791184921,27061304,096712621,560775741,700396641,912349221,133653731,298811251,589712521,775718911,81608911,35535387,690938611,84080829,06985131,54905919,50438805,11022014,83247248,9012919,867409331,514274151,958801741,256655411,04778603,660405741,72868831,88194858,222499051,93740582,678123801,477588301,29065362,91000762,785882141,939376741,754050701,6374809,999896601,467703641,267547911,668560431,789423901,146422811,64753977,035029941,64873449,030618611,49759283,673405921,303884741,693019151,240982231,02645438,42181564,96772951,764636841,512043501,67315524,22492917,264932641,212143131,984652441,67418913,24394838,371094211,03693842,884807301,226647221,16111601,41800781,339511641,75694569,760216101,30252927,765781641,635788021,110694541,718355941,9246563,459461331,128069411,886779151,20269025,33953495,71134384,54972498,7448188,18483202,754930321,450946941,633452441,90329328,584684441,855965531,19428448,656728151,284710641,587304121,14678241,03763657,498422411,221018441,99972255,26577758,334842741,998397151,28613394,94048226,547514841,03802478,822426121,065344941,35228789,08591485,52746341,51905024,81427746,135229621,17551737,448452401,891944251,646935531,36987112,488146911,10630228,29695154,788196021,364912921,458978741,610790811,88257807,06944951,68433951,976297431,074537421,25106462,2312 93421,839908731,21868938,701086811,022328531,3607127,306779521,083948241,442928151,557129641,838342041,27934287,29908299,818485021,294341201,540209831,765764241,3899188,40221177,97681685,473223831,473172021,681187151,300230211,6003257,51896819,814631711,8422094,403140201,71823869,343803941,337244151,17076428,287214841,7459213,981872021,299369001,19431421,96844721,464149141,449320021,40102106,148757301,869406921,60841445,202452211,471995331,63737529,294860341,476128721,1112352,410866211,33196686,862535341,573247141,96691391,65190611,012226421,088356251,28321351,487731201,67554852,88397958,23222354,78431318,25641818,618148601,155690631,177154741,451619521,16949587,22452018,98498761,526981401,123066211,457117841,913710121,30825835,95735435,794775251,520707441,155954641,602701701,147856611,408577441,592882701,166705721,902990331,08946392,345220601,11902668,53764009,36185476,21760922,448220221,77576676,742711741,95826411,821684511,798081621,3467625,270091251,812564741,20587461,24518142,2978647,948672241,217497741,2884795,5051784,460657631,580432151,69605331,52472006,317776201,39275641,537317121,896615331,504342721,495869721,63529949,30714095,020167231,00429448,727117721,934113031,899186311,17458637,655074201,963901311,867177151,87795649,72504863,03999346,14166682,03120499,712446741,989260251,797775941,85940977,733075511,03750349,20759122,258530421,86042782,617009311,04628428,348989131,803699111,650335011,040099631,01430347,510755341,056709731,815632241,891403901,36171201,458471741,50961349,507240441,75175002,37433509,80945664,720048151,662138141,192535,849632341,554191251,768440521,642974431,54616516,434147841,710379741,96616144,37504474,106294121,28263467,304347311,827922201,69977311,594798151,033626141,645663741,497297111,584073841,670579041,341837051,74599931,166224011,218216941,426690051,50213997,943042731,3357457,293788201,699806821,0762642,538386601,654836441,608815801,23650748,551178231,15709605,78858828,53747047,963246251,390080741,254743541,76051278,07345352,660705241,883628441,03442471,842229401,036639151,19149165,637939931,68292892,072478621,606461031,565914411,074574741,2319913,080725141,02732098,13114298,125999621,737225141,774474521,22623019,64622835,259626251,978996941,252988841,871856741,7186841,91181271,26970027,60968471,15510477,22419698,570181,557717341,13861001,961757401,06898741,903506011,179012931,85285529,718490251,70048149,619427441,741521031,36697616,919160741,50251149,12787307,49063149,747045601,745123231,84130018,91408941,133916331,437265441,825980711,53001232,545135021,314394331,42238772,07446283,87499912,98804054,142954621,379870941,553430941,58243786,221957611,748213051,4339098,496287511,961444641,242306001,489924311,04237522,42447915,81145026,796953251,777316641,729377321,20237394,98269262,364410201,2267106,48552893,945948051,946416251,13022197,708950741,921776121,91567639,19872601,30944912,65069207,921290931,845562311,699087701,651932201,82314073,794046841,95339762,49127003,016711501,62750033,51263905,319103811,37706105,41874211,13669628,971391431,29402658,924752841,662235921,636036421,84244128,451633021,94686684,315317731,83707633,653256401,75799934,488523211,731855701,135698401,84285046,10814028,826006321,118511941,181458401,10049261,278854201,32205393,079271421,259414841,396483801,015716641,806637431,227848911,3221048,705871321,973241701,431301741,923185051,593054731,778876541,535043401,197451141,04325855,36345644,04807456,91501712,74917268,064971151,118291641,818913511,37343399,928233501,6281456,044379201,46438169,752180411,181151801,43881005,812708221,620455211,76605737,607976801,17910229,603290531,990991741,36384194,56040925,805316211,185268011,79522979,70035499,05600902,01782682,839478731,938409531,275431151,75753436,443430741,637034511,187839401,93453968,15184741,64954015,651818741,54820953,54213645,299526641,832481241,469048151,19125744,562653831,49400482,080401541,35694826,13108901,218667541,830352841,88425048,056203921,57126672,495985401,739140521,309798641,162498011,980994251,200787611,250301731,62597496,48972761,746564151,2181742,740167141,878804321,65229056,65376215,922873,783287151,758820541,38641774,500178151,41348485,11541459,357475801,198889131,785242441,20764209,507082531,9554842,45991893,35428127,77576785,692375011,285352821,605817941,60656791,84555988,34231946,495401801,739112031,72424305,690099101,92174113,801149151,4581613,042636831,74925753,562155641,397489051,65705147,207321811,1724237,089312741,222857741,98111988,512356,456147611,830216151,58733687,5892175,390760441,641267151,971263711,78079961,748765421,60860049,584468151,4720077,298381611,78596006,742785231,008824541,82503459,243387421,7282059,971567541,974572251,399960921,996543641,06416166,465981541,757252841,225030531,966478541,867479021,821060251,175883031,113593541,551515251,124664621,31131787,76866021,55234049,451213531,28217892,625699041,780838941,90602863,588620831,53178235,9674699,88381109,52553949,354113921,08236341,046646051,219821031,82803332,28600504,688483531,93904335,155970711,64892094,42830839,87664039,16650504,59713835,80180955,051216441,464682031,59715687,09734369,209018941,356034151,06852319,394294001,287761401,27557646,141791701,38334181,422393801,03841977,914776031,714010721,38546993,259971241,204796841,949836251,344656941,539187601,470674211,72426259,32872329,210033251,254212101,76340189,700438131,46957045,280096801,38421148,492314151,385490251,873596021,361646541,63643294";
    String[] a = keys.split(",");
    for (String tmp: Arrays.asList(keys.split(",")))
      strlist.add(tmp);
    log.info("File lines: " +  strlist.size());
  }

}